# Production Docker image for AIOgames
# Optimized for size and security

FROM node:18-alpine AS base
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
FROM base AS deps
COPY package.json package-lock.json* ./
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Build the application
FROM base AS builder
COPY package.json package-lock.json* ./
RUN npm ci --ignore-scripts

COPY . .

# Build with placeholder environment variables for Docker image
ENV MONGODB_URI="placeholder://change-me" \
    NEXTAUTH_SECRET="change-this-secret-in-production" \
    NEXTAUTH_URL="http://localhost:3000" \
    GAME_API_URL="https://gameapi.a7a8524.workers.dev" \
    NODE_ENV="production"

RUN npm run build

# Production image
FROM base AS runner
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Create directory for user data
RUN mkdir -p /app/data && chown nextjs:nodejs /app/data

USER nextjs

EXPOSE 3000

ENV PORT=3000 \
    HOSTNAME="0.0.0.0" \
    NODE_ENV="production"

HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["node", "server.js"]